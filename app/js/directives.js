// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  this.angular.module('myApp.directives', [])
  .directive('appVersion', [
    'version', function(version) {
      return function(scope, elm, attrs) {
        return elm.text(version);
      };
    }
  ])
  .directive('zippy', function() {
    return {
      restrict: 'C',
      replace: true,
      transclude: true,
      scope: {
        title: '@zippyTitle'
      },
      template: '<div>' +
                  '<div class="title">{{title}}</div>' +
                  '<div class="body" ng-transclude></div>' +
                '</div>',
      link: function(scope, element, attrs) {
        var title = angular.element(element.children()[0]),
            opened = true;
        title.bind('click', toggle);
        function toggle() {
          opened = !opened;
          element.removeClass(opened? 'closed' : 'opened');
          element.addClass(opened? 'opened' : 'closed');
        }
        toggle();
      }
    }
  })
  .directive('showcase', function() {
    return {
      restrict: 'E',
      replace: true,
      transclude: true,
      template: '<div ng-switch="isShowcaseVisible" ng-animate="\'slide\'" class="showcase-container">' +
                  '<div class="showcase" ng-switch-when="true" ng-transclude>' +
                    '<div ng-click="hide()" id="hideshowcase" class="ss-icon">delete</div>' +
                '</div>',
      link: function(scope, element, attrs) {
        scope.hide = function() {
          scope.isShowcaseVisible = false;
        }
      }
    }
  })
  .directive('sidetabs', function() {
    return {
      controller: function($scope, $element, $attrs) {
        var sidetabs = [],
            sidetabsContent = [];
        this.registerTab = function(tab) {
          if (!sidetabs.length) {
            tab.isSelected = true;
          }
          sidetabs.push(tab);
        }
        this.registerTabContent = function(tabcontent) {
          if (!sidetabsContent.length) {
            tabcontent.activated = true;
          }
          sidetabsContent.push(tabcontent);
        }
        $scope.$watch('showcaseLesson', function() {
          sidetabs = [];
          sidetabsContent = [];
        })
        $scope.select = function(index) {
          angular.forEach(sidetabs, function(tab) {
            angular.extend(tab, {isSelected: false})
          })
          angular.extend(sidetabs[index], {isSelected: true});
          angular.forEach(sidetabsContent, function(tabcontent) {
            angular.extend(tabcontent, {activated: false})
          })
          angular.extend(sidetabsContent[index], {activated: true})
        }
      }
    }
  })
  .directive('tab', function() {
    return {
      require: '^sidetabs',
      link: function(scope, element, attrs, ctrl) {
        ctrl.registerTab(scope);
      }
    }
  })
  .directive('tabContent', function() {
    return {
      require: '^sidetabs',
      link: function(scope, element, attrs, ctrl) {
        ctrl.registerTabContent(scope);
      }
    }
  })
  .directive('conveyerBelt', [ function() {
    return {
      restrict: 'E',
      transclude: true,
      replace: true,
      templateUrl: 'template/conveyer-belt/conveyer-belt.html',
      controller: function($scope, $element, $attrs, $timeout) {
        var marginLeft = 0, segmentWidth, containerWidth,
            leftMostVisibleIndex = 0, rightMostVisibleindex = 0,
            segments = [], visibleSegments = [],
            findVisibleSegments = function() {
              visibleSegments = segments.slice(leftMostVisibleIndex, rightMostVisibleindex);
              angular.forEach(segments, function(segment) {
                angular.extend(segment, {isVisible: false})
                if (visibleSegments.indexOf(segment) > -1) {
                  angular.extend(segment, {isVisible: true})
                }
              })
            },
            calculateMargin = function(firstVisibleIndex) {
              marginLeft = firstVisibleIndex * segmentWidth;
            }
        this.setSegmentWidth = function(value) {
          segmentWidth = value - 1;
        }
        this.setContainerWidth = function(value) {
          containerWidth = value;
        }
        this.setVisibleSegments = function() {
          var numberVisible = Math.round(containerWidth / segmentWidth);
          rightMostVisibleindex = leftMostVisibleIndex + numberVisible;
          findVisibleSegments();
        }
        this.addSegment = function(segment) {
          segments.push(segment);
        }
        $scope.leftLimit = function() {
          return leftMostVisibleIndex == 0;
        }
        $scope.rightLimit = function() {
          return rightMostVisibleindex == segments.length;
        }
        $scope.next = function() {
          leftMostVisibleIndex += 1;
          rightMostVisibleindex += 1;
          calculateMargin(leftMostVisibleIndex);
          findVisibleSegments();
        }
        $scope.prev = function() {
          leftMostVisibleIndex -= 1;
          rightMostVisibleindex -= 1;
          calculateMargin(leftMostVisibleIndex);
          findVisibleSegments();
        }
        $scope.setMargin = function() {
          return {"margin-left": -marginLeft + "px"}
        }
        $scope.select = function(index) {
          angular.forEach(segments, function(segment) {
            angular.extend(segment, {isSelected: false})
          })
          angular.extend(segments[index], {isSelected: true})
          $scope.$emit('selection', index)
        }
      },
      link: function(scope, element, attrs, ctrl) {
        ctrl.setContainerWidth(element[0].offsetWidth);
      }
    }
  }])
  .directive('segment', [ function() {
    return {
      require: '^conveyerBelt',
      restrict: 'E',
      transclude: true,
      replace: true,
      templateUrl: 'template/conveyer-belt/segment.html',
      link: function(scope, element, attrs, conveyerBelt) {
        conveyerBelt.addSegment(scope);
        if (scope.$index == 0) {
          conveyerBelt.setSegmentWidth(element[0].offsetWidth);
        }
        if (scope.$last) {
          conveyerBelt.setVisibleSegments()
        }
      }
    }
  }])
  .directive('tools', function() {
    return {
      controller: function($scope, $element, $attrs) {
        var toolWidth, 
            containerWidth,
            itemsFittingInOneRow, 
            tools = [], 
            rows = [],
            toolsExpander,
            getRowOfTool = function(tool) {
              for(var i=0; i<rows.length; i++){
                var index = rows[i].indexOf(tool);
                if (index > -1){
                  return i;
                }
              }
            };
        this.addTool = function(tool) {
          tools.push(tool);
        }
        this.setToolWidth = function(value) {
          toolWidth = value;
        }
        this.setContainerWidth = function(value) {
          containerWidth = value;
        }
        this.setRows = function() {
          itemsFittingInOneRow = Math.round(containerWidth / toolWidth);          
          for (var i=0; i<tools.length; i=i+itemsFittingInOneRow) {
            rows.push(tools.slice(i, i+itemsFittingInOneRow))
          }
        }
        toolsExpander = document.getElementById("toolsExpander")
        $scope.showcaseTool = {}
        $scope.open = function(tool){
          var toolAppendee;
          if ($scope.isOpen(tool)) {
            $scope.opened = undefined;
          } else {
            $scope.opened = tool;
            $scope.showcaseTool = tool;
            toolAppendee = document.getElementById("tool" + tools.indexOf(rows[getRowOfTool(tool)][itemsFittingInOneRow - 1]))
            angular.element(toolAppendee).after(toolsExpander)
          }  
        };
        $scope.isOpen = function(tool) {
          return $scope.opened === tool;
        };
      },
      link: function(scope, element, attrs, ctrl) {
        ctrl.setContainerWidth(element[0].offsetWidth);
      }
    }
  })
  .directive('tool', function() {
    return {
      require: '^tools',
      link: function(scope, element, attrs, toolsCtrl) {
        toolsCtrl.addTool(scope.tool);
        if (scope.$index == 0) {
          toolsCtrl.setToolWidth(element[0].offsetWidth);
        }
        if (scope.$last) {
          toolsCtrl.setRows()
        }
      }
    }
  })
  .directive('expando', function() {
    return {
      require: '^tools',
      link: function(scope, element, attrs, toolsCtrl) {
      }
    }
  })
  .directive('bcplayer', function(BC, $timeout) {
    return {
      restrict: 'E',
      templateUrl: 'template/bcplayer.html',
      link: function(scope) {
        var BCL = {};
        scope.data = BC.data;
        scope.index = scope.$index + 1;
        BCL.isPlayerAdded = false;
        BCL.onTemplateLoaded = function () {
          BCL.isPlayerAdded = true;
          var id = scope.index;
          BCL.player = brightcove.api.getExperience(id);
          BCL.experienceModule = BCL.player.getModule(brightcove.api.modules.APIModules.EXPERIENCE);
          BCL.videoPlayer = BCL.player.getModule(brightcove.api.modules.APIModules.VIDEO_PLAYER)
        };
        scope.$watch('showcaselesson.videoID', function() {
          if (BCL.isPlayerAdded) {
            BCL.videoPlayer.loadVideoByID(scope.showcaselesson.videoID);
          }
          else {
            $timeout(brightcove.createExperiences);
            console.log("brightcove")
            $timeout(BCL.onTemplateLoaded, 2000);
          }
        })
      }
    }
  });

}).call(this);

angular.module("conveyer-belt", ["conveyer-belt.tpls"]);
angular.module("conveyer-belt.tpls", ["template/conveyer-belt/conveyer-belt.html","template/conveyer-belt/segment.html"]);

angular.module("template/conveyer-belt/conveyer-belt.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/conveyer-belt/conveyer-belt.html",
    "<div class=\"conveyer-belt-container\">" +
    " <div ng-style=\"setMargin()\" class=\"conveyer-belt\" ng-transclude>\n" +
    " </div>\n" +
    " <a ng-hide=\"leftLimit()\" ng-click=\"prev()\" class=\"ss-icon conveyer-belt-control left\">previous</a>\n" +
    " <a ng-hide=\"rightLimit()\" ng-click=\"next()\" class=\"ss-icon conveyer-belt-control right\">next</a>\n" +
    "</div>" +
    "");
}]);

angular.module("template/conveyer-belt/segment.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/conveyer-belt/segment.html",
    "<div ng-click=\"select($index)\" class=\"segment\" ng-class=\"{'visible': isVisible, 'selected': isSelected && isShowcaseVisible }\" ng-transclude></div>\n" +
    "");
}]);